const { generateQRCode } = require("../services/qrCodeService");
const QRCodeModel = require("../models/QRCode");
const Etablissement = require("../models/Etablissement");

// G√©n√©rer un QR Code pour un √©tablissement
async function createQRCode(req, res) {
    try {
        const { idEtablissement } = req.body;
        if (!idEtablissement) return res.status(400).json({ message: "ID √©tablissement requis" });

        const result = await generateQRCode(idEtablissement);
        return res.status(201).json(result);
    } catch (error) {
        return res.status(500).json({ message: error.message });
    }
}

// Rediriger vers un √©tablissement via son QR Code
async function redirectToEtablissement(req, res) {
    try {
        const { qr_code } = req.params;
        console.log("üîπ QR Code re√ßu :", qr_code);

        // V√©rifier si le QR Code existe
        const qrCode = await QRCodeModel.findOne({ urlUnique: qr_code });
        if (!qrCode) {
            console.log("‚ùå QR Code non trouv√© dans la BDD");
            return res.status(404).json({ message: "QR Code non trouv√©" });
        }
        console.log("‚úÖ QR Code trouv√© :", qrCode);

        // V√©rifier si l'√©tablissement existe
        const etablissement = await Etablissement.findById(qrCode.idEtablissement);
        if (!etablissement) {
            console.log("‚ùå √âtablissement non trouv√© avec ID :", qrCode.idEtablissement);
            return res.status(404).json({ message: "√âtablissement non trouv√©" });
        }
        console.log("‚úÖ √âtablissement trouv√© :", etablissement);

        return res.json({ message: "Redirection r√©ussie", etablissement });
    } catch (error) {
        console.error("Erreur serveur :", error);
        return res.status(500).json({ message: "Erreur serveur", error });
    }
}


module.exports = { createQRCode, redirectToEtablissement };
